/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package scala.rest.api

import akka.actor.typed.ActorSystem
import akka.actor.typed.scaladsl.Behaviors
import akka.event.slf4j.Logger
import akka.http.scaladsl.Http
import akka.http.scaladsl.model._
import akka.http.scaladsl.server.Directives
import akka.http.scaladsl.server.Directives._

import scala.concurrent.ExecutionContextExecutor
import scala.io.StdIn

object HttpServerRoutingMinimal {
	def main(args: Array[String]): Unit = {
		val logger = Logger.apply(HttpServerRoutingMinimal.getClass.getSimpleName);

		implicit val system: ActorSystem[Nothing] = ActorSystem(Behaviors.empty, "my-system")
		// needed for the future flatMap/onComplete in the end
		implicit val executionContext: ExecutionContextExecutor = system.executionContext

		val route =
			path("hello") {
				Directives.get {
					complete(HttpEntity(ContentTypes.`text/html(UTF-8)`, "<h1>Say hello to akka-http</h1>"))
				}
			}

		val bindingFuture = Http().newServerAt("localhost", 8080).bind(route)

		logger.info(s"Server now online. Please navigate to http://localhost:8080/hello\nPress RETURN to stop...")
		StdIn.readLine() // let it run until user presses return
		bindingFuture
			.flatMap(_.unbind()) // trigger unbinding from the port
			.onComplete(_ => system.terminate()) // and shutdown when done
	}
}